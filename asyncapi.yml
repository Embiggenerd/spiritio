asyncapi: 3.0.0
info:
    title: Spirit IO
    version: '0.1.0'
    description: "
        An API for enabling live chat and video conferencing

        ## Message types

        ### Problem

        - Since this is an event driven architecture, the first problem is how
        do we treat messages sent between client and server.

        ### Solution 1

        - The lowest hanging fruit is to impose a request/reply philosophy,
        where everything from the user is a request, and the server replies.

        ### Problem

        If a user broadcasts a message to a room of ten, are the other nine
        users receiving a `reply` from the server? They never requested a
        message. With events, a 1:1 relationship doesn't work.

        ### Solution 2

        - It's best to look at the relationship between a server and client
        similarly to two people, with one taking direction from another.

        - Jack needs to do some work, so he offloads it to Ryan. He tells Ryan
        to go park his car. Ryan then asks a question, `where do you want it
        parked`? A new work order is produced and sent to the server, `on the
        side of the road` The `Car was parked on the side of the road` event is
        then triggered, and it's completion broadcast.

        - The work orders (from client to server) and the question (from server
        to client) are not treated as events, and neither is a question
        `answered`. An event is simply the result of a work order, which may or
        may not have been augmented by questions."

servers:
    production:
        host: spirit.igoratakhanov.com
        pathname: /ws
        protocol: wss
        description: Websocket connection that handles every aspect of the app
channels:
    root:
        address: /ws
        messages:
            work_order:
                $ref: '#/components/messages/work_order'
            validate_access_token:
                $ref: '#/components/messages/validate_access_token'
components:
    messages:
        work_order:
            summary: Client requests to start audio and video streams
            payload:
                $ref: '#/components/schemas/work_order'
        validate_access_token:
            summary: Client requests to validate access token
            payload:
                $ref: '#/components/schemas/validate_access_token'
    schemas:
        work_order:
            type: object
            properties:
                order:
                    type: string
                details:
                    type: object
                    properties:
                        audio:
                            type: boolean
                            description: A request for audio track
                        video:
                            type: boolean
                            description: A request for video track
        validate_access_token:
            type: object
            properties:
                order:
                    type: string

                details:
                    type: string
                    description: The access token
